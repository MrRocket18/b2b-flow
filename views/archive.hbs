{{!-- views/archive.hbs --}}
<div class="orders-page-container">
  <div class="header-section">
    <h1 class="page-title">Архив заказов</h1>

    <div class="filter-wrapper">
      <div class="search-container input-field">
        <input id="search-input" type="text" placeholder="Поиск по архиву заказов...">
      </div>
      <div class="row" style="margin-bottom: 0; margin-right: 0;">
        <div class="input-field col s6 m6">
          <input type="date" id="date-from">
          <label for="date-from" class="active">От</label>
        </div>
        <div class="input-field col s6 m6">
          <input type="date" id="date-to">
          <label for="date-to" class="active">До</label>
        </div>
      </div>
    </div>
  </div>

  <div class="divider"></div>

  <div class="orders-container card-panel white lighten-1">
    <table class="highlight responsive-table">
      <thead>
        <tr>
          <th>ID Заказа</th>
          <th>Дата оформления</th>
          <th>Дата доставки</th>
          <th>Пользователь</th>
          <th>Сумма</th>
          <th>Товар</th>
          <th>Статус</th>
          <th></th>
        </tr>
      </thead>
      <tbody id="archive-body">
        {{#each arch}}
        <tr>
          <td>{{ID}}</td>
          <td data-field="registration_date">{{registration_date}}</td>
          <td data-field="delivery_date">{{delivery_date}}</td>
          <td>{{user_fullname}}</td>
          <td>{{total}} ₽</td>
          <td>
            <a href="{{link}}" class="product-link">{{item_name}}</a>
          </td>
          <td>
            <select name="status" class="browser-default">
              <option value=0 {{#if (isEqual this.status 0)}}selected{{/if}}>На рассмотрении</option>
              <option value=1 {{#if (isEqual this.status 1)}}selected{{/if}}>Закупаем</option>
              <option value=2 {{#if (isEqual this.status 2)}}selected{{/if}}>Ждём поставку</option>
              <option value=3 {{#if (isEqual this.status 3)}}selected{{/if}}>Готово к получению</option>
              <option value=4 {{#if (isEqual this.status 4)}}selected{{/if}}>Получен</option>
              <option value=5 {{#if (isEqual this.status 5)}}selected{{/if}}>Отменен</option>
            </select>
          </td>
          <td>
            <button type="button" class="btn-flat update-status-btn" data-id="{{ID}}">
              <i class="material-icons green-text">check</i>
            </button>
          </td>
        </tr>
        {{/each}}
      </tbody>
    </table>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    M.AutoInit();

    // --- Элементы ---
    const searchInput = document.getElementById('search-input');
    const dateFromInput = document.getElementById('date-from');
    const dateToInput = document.getElementById('date-to');
    let rows = Array.from(document.querySelectorAll('#archive-body tr'));

    // --- Парсинг даты из DD.MM.YYYY в объект Date ---
    function parseDate(dateStr) {
      if (!dateStr) return null;
      const [day, month, year] = dateStr.split('.').map(Number);
      const date = new Date(year, month - 1, day); // Месяцы в JS начинаются с 0
      return isNaN(date.getTime()) ? null : date; // Проверка на корректную дату
    }

    // --- Функция фильтрации ---
    function applyFilters() {
      const term = searchInput?.value.toLowerCase() || '';
      let fromDate = dateFromInput?.value ? new Date(dateFromInput.value) : null;
      if (fromDate) {
        fromDate.setDate(fromDate.getDate() - 1);
      }
      const toDate = dateToInput?.value ? new Date(dateToInput.value) : null;

      rows.forEach(row => {
        // Получаем registration_date из таблицы
        const regDateStr = row.querySelector('[data-field="registration_date"]')?.innerText.trim();
        const regDate = parseDate(regDateStr);

        let showRow = true;

        // Фильтр по "От" (включительно)
        if (fromDate && regDate && regDate < fromDate) {
          showRow = false;
        }

        // Фильтр по "До" (включительно)
        if (toDate && regDate && regDate > toDate) {
          showRow = false;
        }

        // Поиск по тексту
        const text = row.innerText.toLowerCase();
        const matchesSearch = !term || text.includes(term);

        row.style.display = (showRow && matchesSearch) ? '' : 'none';
      });
    }

    // --- Подписка на события ---
    if (searchInput) searchInput.addEventListener('input', applyFilters);
    if (dateFromInput) dateFromInput.addEventListener('change', applyFilters);
    if (dateToInput) dateToInput.addEventListener('change', applyFilters);

    // --- Кнопка обновления статуса ---
    document.addEventListener('click', async function (e) {
      const button = e.target.closest('.update-status-btn');
      if (!button) return;

      const orderId = button.dataset.id;
      const row = button.closest('tr');
      const select = row.querySelector('select[name="status"]');
      const newStatus = select.value;

      try {
        const response = await fetch(`/archive-update/${orderId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: newStatus })
        });

        const result = await response.json();

        if (result.success) {
          M.toast({ html: 'Статус успешно изменён!', classes: 'green darken-1 rounded' });
          row.remove();
        } else {
          alert('Ошибка: ' + (result.error || 'Не удалось изменить статус'));
        }
      } catch (err) {
        console.error('AJAX ошибка:', err);
        alert('Серверная ошибка');
      }
    });
  });
</script>