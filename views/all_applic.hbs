{{!-- views/all_applic.hbs --}}
<div class="orders-page-container">
  <h1 class="orders-page-title">Все заказы</h1>

  <!-- Дата-фильтр: От/До -->
  <div class="date-filters row">
    <div class="input-field col s6 m2 offset-m8">
      <input type="date" id="date-from">
      <label for="date-from" class="active">От</label>
    </div>
    <div class="input-field col s6 m2">
      <input type="date" id="date-to">
      <label for="date-to" class="active">До</label>
    </div>
  </div>

  <!-- Сводная таблица -->
  <div class="card-panel white lighten-1 summary-container">
    <table class="striped centered highlight summary-table">
      <thead>
        <tr>
          <th>Новые</th>
          <th>В обработке</th>
          <th>Выполнено</th>
          <th>Отменено</th>
          <th>Итого</th>
        </tr>
      </thead>
      <tbody>
        <!-- Строка с количеством заказов -->
        <tr>
          {{#each summary}}
            <td>{{this.new}}</td>
            <td>{{this.processing}}</td>
            <td>{{this.completed}}</td>
            <td>{{this.cancelled}}</td>
            <td>{{this.total}} </td>
          {{/each}}
        </tr>

        <!-- Строка с суммами -->
        <tr>
          {{#each summary}}
            <td>{{this.sum_new_formatted}} ₽</td>
            <td>{{this.sum_processing_formatted}} ₽</td>
            <td>{{this.sum_completed_formatted}} ₽</td>
            <td>{{this.sum_cancelled_formatted}} ₽</td>
            <td>{{this.sum_total_formatted}} ₽</td>
          {{/each}}
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Основные фильтры -->
  <div class="row filter-bar">
    <div class="input-field col s6 m6">
      <input type="text" id="search-input" placeholder="Поиск названию, пользователю, дате">
    </div>
    <div class="input-field col s6 m6">
      <select id="status-filter" >
        <option value="">Все статусы</option>
        <option value="0">На рассмотрении</option>
        <option value="1">Закупаем</option>
        <option value="2">Ждём поставку</option>
        <option value="3">Готово к получению</option>
        <option value="4">Получен</option>
        <option value="5">Отменено</option>
      </select>
      <label for="status-filter" class="wht-text">Фильтр по статусу</label>
    </div>
  </div>

  <!-- Таблица заказов -->
  <div class="card-panel white lighten-1 orders-container">
    <table class="striped highlight responsive-table" id="orders-table">
      <thead>
        <tr>
          <th class="sortable" data-sort="item_name">Название</th>
          <th class="sortable" data-sort="count">Кол-во</th>
          <th class="sortable" data-sort="price">Цена</th>
          <th class="sortable" data-sort="desired_date">Желаемая дата</th>
          <th class="sortable" data-sort="delivery_date">Предполагаемая</th>
          <th>Пользователь</th>
          <th class="sortable" data-sort="status">Статус</th>
          <th>Комментарий</th>
          <th></th>
        </tr>
      </thead>
      <tbody id="orders-body">
        {{#each requests}}
          {{#unless (or (isEqual this.status 4) (isEqual this.status 5))}}
            <tr>
              <form class="order-form" data-id="{{this.ID}}">
                <td><a href="{{this.link}}" target="_blank">{{this.item_name}}</a></td>
                <td data-field="count">{{this.count}}</td>
                <td data-field="price">{{this.price}}</td>
                <td data-field="desired_date">{{this.desired_date}}</td>
                <td class="hide" data-field="registration_date">{{this.registration_date}}</td>
                <td data-field="delivery_date">
                  <input type="date" name="delivery_date" value="{{this.delivery_date}}" min="{{todayDate}}" required>
                  <span class="formatted-date">
                    {{#if this.delivery_date}}{{this.delivery_date}}{{else}}—{{/if}}
                  </span>
                </td>
                <td data-field="user_fullname">{{this.user_fullname}}</td>
                <td data-field="status">
                  <select name="status" class="browser-default">
                    <option value="0" {{#if (isEqual this.status 0)}}selected{{/if}}>На рассмотрении</option>
                    <option value="1" {{#if (isEqual this.status 1)}}selected{{/if}}>Закупаем</option>
                    <option value="2" {{#if (isEqual this.status 2)}}selected{{/if}}>Ждём поставку</option>
                    <option value="3" {{#if (isEqual this.status 3)}}selected{{/if}}>Готово к получению</option>
                    <option value="4" {{#if (isEqual this.status 4)}}selected{{/if}}>Получен</option>
                    <option value="5" {{#if (isEqual this.status 5)}}selected{{/if}}>Отменено</option>
                  </select>
                </td>
                <td data-field="comment">
                  <input type="text" name="comment" maxlength="500" value="{{this.comment}}" >
                </td>
                <td class="order-actions">
                  <button type="button" class="btn-flat tooltipped save-order-btn" data-tooltip="Сохранить изменения">
                    <i class="material-icons green-text">check</i>
                  </button>
                  <button type="button" class="btn-flat tooltipped edit-btn" data-tooltip="Редактировать" data-id="{{this.ID}}">
                    <i class="material-icons">edit</i>
                  </button>
                </td>
              </form>
            </tr>
          {{/unless}}
        {{/each}}
      </tbody>
    </table>
  </div>



  <!-- MODAL: редактирование заявки -->
  <div id="edit-modal" class="modal">
    <form method="POST" id="edit-form">
      <div class="modal-content">
        <h5>Редактировать заявку</h5>
        <div class="input-field">
          <input id="edit-item-name" name="item_name" type="text" required>
          <label for="edit-item-name" class="active">Название</label>
        </div>
        <div class="input-field">
          <input id="edit-count" name="count" type="number" required>
          <label for="edit-count" class="active">Количество</label>
        </div>
        <div class="input-field">
          <input id="edit-link" name="link" type="text" required>
          <label for="edit-link" class="active">Ссылка в названии</label>
        </div>
        <div class="input-field">
          <input id="edit-delivery-date" name="delivery_date" type="date">
          <label for="edit-delivery-date" class="active">Предполагаемая дата</label>
        </div>
          <div class="input-field">
          <select id="edit-status" style="top: 0;" name="status" required>
            <option value="0">На рассмотрении</option>
            <option value="1">Закупаем</option>
            <option value="2">Ждём поставку</option>
            <option value="3">Готово к получению</option>
            <option value="4">Получен</option>
            <option value="5">Отменено</option>
          </select>
          <!-- Добавлен уникальный класс или ID -->
          <label for="edit-status" class="active edit-status-label" id="edit-status-label">Статус</label>
        </div>
        <div class="input-field">
          <input id="edit-comment" name="comment" type="text">
          <label for="edit-comment" class="active">Комментарий</label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="modal-close btn blue darken-4">Сохранить</button>
        <a class="modal-close btn-flat">Отмена</a>
      </div>
    </form>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
       M.AutoInit();
      // --- Инициализация Materialize ---
      const statusModal = M.Modal.init(document.getElementById('status-modal'));
      const editModal = M.Modal.init(document.getElementById('edit-modal'));
      M.FormSelect.init(document.querySelectorAll('select'));

      // --- Ограничение на минимальную дату для delivery_date ---
      document.querySelectorAll('[name="delivery_date"]').forEach(input => {
        const today = new Date().toISOString().slice(0, 10);
        input.setAttribute('min', today);
      });

      // --- Логика модалки изменения статуса ---
      const statusForm = document.getElementById('status-form');
      document.querySelectorAll('.change-status-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.dataset.id;
          const currentStatus = btn.dataset.status;
          statusForm.action = `/update-status/${id}`;
          const select = document.getElementById('new-status-select');
          [...select.options].forEach(opt => opt.selected = (opt.value === currentStatus));
          M.FormSelect.init(select);
          statusModal.open();
        });
      });

      // --- Фильтрация и сортировка заявок ---
      const searchInput = document.getElementById('search-input');
      const statusFilter = document.getElementById('status-filter');

      let rows = Array.from(document.querySelectorAll('#orders-body tr'));
      let sortField = null;
      let sortAsc = true;

      function applyFilters() {
        const term = searchInput?.value.toLowerCase() || '';
        const selectedStatus = statusFilter?.value || '';

        rows.forEach(row => {
          const text = row.innerText.toLowerCase();
          const statusSelect = row.querySelector('select[name="status"]');
          const matchesSearch = !term || text.includes(term);
          const matchesStatus = !selectedStatus || (statusSelect && statusSelect.value === selectedStatus);

          row.style.display = (matchesSearch && matchesStatus) ? '' : 'none';
        });

        M.FormSelect.init(document.getElementById('edit-status'));
        M.updateTextFields();
      }

      if (searchInput) searchInput.addEventListener('input', applyFilters);
      if (statusFilter) statusFilter.addEventListener('change', applyFilters);

      function sortTable(field) {
        const indexMap = {
          item_name: 0,
          count: 1,
          price: 2,
          desired_date: 3,
          delivery_date: 5,
          status: 6
        };
        const colIndex = indexMap[field];
        const sorted = [...rows].sort((a, b) => {
          const aText = (a.cells[colIndex]?.innerText || '').trim();
          const bText = (b.cells[colIndex]?.innerText || '').trim();
          const aNum = parseFloat(aText.replace(',', '.'));
          const bNum = parseFloat(bText.replace(',', '.'));
          if (!isNaN(aNum) && !isNaN(bNum)) {
            return sortAsc ? aNum - bNum : bNum - aNum;
          }
          return sortAsc ? aText.localeCompare(bText) : bText.localeCompare(aText);
        });
        const tbody = document.getElementById('orders-body');
        tbody.innerHTML = '';
        sorted.forEach(r => tbody.appendChild(r));
      }

      document.querySelectorAll('.sortable').forEach(th => {
        th.addEventListener('click', () => {
          const field = th.getAttribute('data-sort');
          sortAsc = (sortField === field) ? !sortAsc : true;
          sortField = field;
          sortTable(field);
        });
      });

      // --- Сохранение через AJAX ---
      document.addEventListener('click', async e => {
        const btn = e.target.closest('.save-order-btn');
        if (!btn) return;

        const row = btn.closest('tr');
        const form = row.querySelector('form.order-form');
        const orderId = form.dataset.id;
        const deliveryInput = row.querySelector('[name="delivery_date"]');
        const statusSelect = row.querySelector('select[name="status"]');
        const commentInput = row.querySelector('input[name="comment"]');

        const data = {
          delivery_date: deliveryInput.value,
          status: parseInt(statusSelect.value),
          comment: commentInput.value
        };

        try {
          const res = await fetch(`/admin-update/${orderId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          const json = await res.json();
          if (json.success) {
            M.toast({ html: 'Изменения успешно сохранены', classes: 'green darken-1 rounded' });
            // Обновление отображения
            if (data.delivery_date) {
              row.querySelector('.formatted-date').textContent = data.delivery_date.split('-').reverse().join('.');
            }
            statusSelect.dispatchEvent(new Event('change'));
            rows = Array.from(document.querySelectorAll('#orders-body tr'));
            applyFilters();
          } else {
            M.toast({ html: json.message || 'Ошибка при сохранении', classes: 'red darken-1 rounded' });
          }
        } catch (err) {
          console.error(err);
          M.toast({ html: 'Ошибка сети при сохранении', classes: 'red darken-1 rounded' });
        }
      });

      // --- Логика модалки редактирования ---
   

    // Глобальная переменная для хранения экземпляра модального окна
    let modalInstance;


    const editButtons = document.querySelectorAll('.edit-btn');
    console.log('editButtons:', editButtons);
    const orderForm = document.getElementById('edit-form');
    console.log('orderForm:', orderForm);

    // Функция для открытия модального окна (Materialize CSS)
    function openEditModal() {
      const modal = document.getElementById('edit-modal'); // Изменено
      if (modal) {
        if (!modalInstance) {
          modalInstance = M.Modal.getInstance(modal);
          console.log('Modal instance created inside openEditModal:', modalInstance); // Проверяем создание экземпляра
        }
        console.log('About to open modal with:', modalInstance); // Before opening
        modalInstance.open(); // Открываем модальное окно
      } else {
        console.error('Модальное окно с ID "edit-modal" не найдено в DOM.'); // Изменено
        M.toast({ html: 'Не удалось открыть окно редактирования', classes: 'red rounded' });
      }
    }

    editButtons.forEach(button => {
        console.log('Found edit button:', button); // Проверяем, что кнопка найдена

        button.addEventListener('click', function(event) {
            event.preventDefault();
            console.log('Clicked edit button:', this);

            const orderId = this.getAttribute('data-id');
            console.log('orderId (from button):', orderId);


            orderForm.action = `/edit-admin/${orderId}`; // Изменено:  Устанавливаем action формы

            orderForm.setAttribute('data-order-id', orderId); // Store the orderId in the form

            fetch(`/get-order/${orderId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Заполнение формы редактирования
                    const itemNameElement = document.getElementById('edit-item-name');
                    console.log('itemNameElement:', itemNameElement);
                    if (itemNameElement) {
                        itemNameElement.value = data.item_name || '';
                    } else {
                        console.error('Элемент с id "edit-item-name" не найден.');
                    }

                    const countElement = document.getElementById('edit-count');
                    console.log('countElement:', countElement);
                    if (countElement) {
                        countElement.value = data.count || '';
                    } else {
                        console.error('Элемент с id "edit-count" не найден.');
                    }

                    const linkElement = document.getElementById('edit-link');
                    console.log('linkElement:', linkElement);
                    if (linkElement) {
                        linkElement.value = data.link || '';
                    } else {
                        console.error('Элемент с id "edit-link" не найден.');
                    }

                    if (data.delivery_date) {
                      let desiredDateValue;
                      if (data.delivery_date.includes('.')) {
                        const [day, month, year] = data.delivery_date.split('.');
                        if (day && month && year) {
                          desiredDateValue = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                        }
                      } else {
                        desiredDateValue = data.desired_date;
                      }

                      document.getElementById('edit-delivery-date').value = desiredDateValue || '';
                    }

                    const commentElement = document.getElementById('edit-comment');
                    console.log('commentElement:', commentElement);
                    if (commentElement) {
                        commentElement.value = data.comment || '';
                    } else {
                        console.error('Элемент с id "edit-comment" не найден.');
                    }

                    const statusElement = document.getElementById('edit-status');
                      if (statusElement) {
                        statusElement.value = data.status || '0';
                        M.FormSelect.init(statusElement); // <-- ОСНОВНАЯ ИСПРАВЛЯЮЩАЯ СТРОКА
                        M.updateTextFields();
                      } else {
                        console.error('Элемент с id "edit-status" не найден.');
                      }
                    console.log('statusElement', statusElement);

                    if (statusElement) {
                       statusElement.value = data.status || '0';
                       //  M.FormSelect.init(statusElement);
                       M.updateTextFields(); // Обновляем текстовые поля Materialize
                    } else {
                        console.error('Элемент с id "edit-status" не найден.')
                    }

                    // Открываем модальное окно
                    openEditModal();

                    // Инициализируем Materialize CSS (обновляем текстовые поля)
                    M.updateTextFields(); // Обновляем текстовые поля Materialize

                })
                .catch(error => {
                    console.error('Ошибка при загрузке данных для редактирования:', error);
                    M.toast({ html: 'Не удалось загрузить данные для редактирования.', classes: 'red rounded' });
                });
        });
    });

    if (orderForm) {
      orderForm.addEventListener('submit', (event) => {
            event.preventDefault();

            const formData = new FormData(orderForm);
            const method = orderForm.getAttribute('method') || 'POST';
            const url = orderForm.action;

            fetch(url, {
                method: method,
                body: formData,
            })
            .then(response => {
                if (response.ok) {
                  const isCreation = url.endsWith('/create'); 
                  let redirectUrl = '/manager'; 

                  if (isCreation) {
                      redirectUrl += '?toast=create-success';
                  } else {
                      redirectUrl += '?toast=edit-success';
                  }

                  window.location.href = redirectUrl; 
              } else {
                console.error(`Ошибка при ${method === 'POST' ? 'создании' : 'обновлении'} заказа:`, response.statusText);
                M.toast({ html: `Ошибка при ${method === 'POST' ? 'создании' : 'обновлении'} заказа. Попробуйте позже.`, classes: 'red rounded' });
            }
        })
            .catch(error => {
                console.error('Сетевая ошибка:', error);
                M.toast({ html: 'Ошибка сети. Не удалось выполнить операцию.', classes: 'red rounded' });
            });
        });
    }

    window.addEventListener('load', () => {
        const urlParams = new URLSearchParams(window.location.search);
        const toastType = urlParams.get('toast');
        console.log(toastType)
        if (toastType === 'create-success') {
            M.toast({ html: 'Новый заказ успешно создан!', classes: 'green rounded' });
        } else if (toastType === 'edit-success') {
            M.toast({ html: 'Заказ успешно отредактирован!', classes: 'green rounded' });
        } else if (toastType === 'error') {
            M.toast({ html: 'Произошла ошибка при выполнении операции с заказом.', classes: 'red rounded' });
        }
    });
    

     // Функция для очистки полей формы
     function clearForm() {
         document.getElementById('edit-item_name').value = '';
         document.getElementById('edit-link').value = '';
         document.getElementById('edit-count').value = '';
         document.getElementById('edit-price').value = '';
         document.getElementById('delivery_date').value = '';
         document.getElementById('edit-comment').value = '';
         document.getElementById('edit-status').value = '0'; // сбрасываем select на первое значение

         M.updateTextFields(); // Обновляем текстовые поля Materialize после очистки

         // Если у вас datepicker, необходимо сбросить и его
        const dateInput = document.getElementById('delivery_date');
        const datepickerInstance = M.Datepicker.getInstance(dateInput);
        if (datepickerInstance) {
            datepickerInstance.setDate(null); // очищаем выбранную дату
        }
    }


      // --- AJAX-обновление сводной таблицы по registration_date ---
      const dateFromInput = document.getElementById('date-from');
      const dateToInput = document.getElementById('date-to');

      function updateSummaryTable() {
        const from = dateFromInput.value;
        const to = dateToInput.value;
        const url = new URL(window.location.href);
        url.searchParams.set('dateFrom', from);
        url.searchParams.set('dateTo', to);

        fetch(url.toString(), {
          headers: {
            'Accept': 'application/json'
          }
        })
        .then(res => res.json())
        .then(data => {
          const summaryRows = document.querySelectorAll('.summary-table tbody tr');

          if (data.summary.length > 0) {
            const s = data.summary[0];

            // Первая строка: количество
            summaryRows[0].innerHTML = `
              <td>${s.new}</td>
              <td>${s.processing}</td>
              <td>${s.completed}</td>
              <td>${s.cancelled}</td>
              <td>${s.total}</td>
            `;

            // Вторая строка: суммы
            summaryRows[1].innerHTML = `
              <td>${s.sum_new_formatted} ₽</td>
              <td>${s.sum_processing_formatted} ₽</td>
              <td>${s.sum_completed_formatted} ₽</td>
              <td>${s.sum_cancelled_formatted} ₽</td>
              <td>${s.sum_total_formatted} ₽</td>
            `;
          }
        })
        .catch(err => console.error("Ошибка загрузки сводной таблицы", err));
      }

      dateFromInput.addEventListener('change', updateSummaryTable);
      dateToInput.addEventListener('change', updateSummaryTable);
    });
  </script>
</div>

<style>
  .modal {
    border-radius: 16px;
  }
  /* Блюр заднего фона при открытом модальном окне */
body:has(.modal.open)::before {
  content: '';
  position: fixed;
  inset: 0;
  z-index: 998;
  background: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(2px);
}
#edit-status {
  color: black;
}

</style>