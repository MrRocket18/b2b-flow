{{!-- views/all_applic.hbs --}}
<div class="orders-page-container">
  <h1 class="orders-page-title">Все заказы</h1>

  <!-- Дата-фильтр: От/До -->
  <div class="date-filters row">
    <div class="input-field col s6 m2 offset-m8">
      <input type="date" id="date-from">
      <label for="date-from" class="active">От</label>
    </div>
    <div class="input-field col s6 m2">
      <input type="date" id="date-to">
      <label for="date-to" class="active">До</label>
    </div>
  </div>

  <!-- Сводная таблица -->
  <div class="card-panel white lighten-1 summary-container">
    <table class="striped centered highlight summary-table">
      <thead>
        <tr>
          <th>Новые</th>
          <th>В обработке</th>
          <th>Выполнено</th>
          <th>Отменено</th>
          <th>Итого</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          {{#each summary}}
            <td>{{this.new}}</td>
            <td>{{this.processing}}</td>
            <td>{{this.completed}}</td>
            <td>{{this.cancelled}}</td>
            <td>{{this.total}}</td>
          {{/each}}
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Основные фильтры -->
  <div class="row filter-bar">
    <div class="input-field col s6 m6">
      <input type="text" id="search-input" placeholder="Поиск названию, пользователю, дате">
    </div>
    <div class="input-field col s6 m6">
      <select id="status-filter">
        <option value="">Все статусы</option>
        <option value="0">На рассмотрении</option>
        <option value="1">Закупаем</option>
        <option value="2">Ждём поставку</option>
        <option value="3">Готово к получению</option>
        <option value="4">Получен</option>
        <option value="5">Отменено</option>
      </select>
      <label for="status-filter">Фильтр по статусу</label>
    </div>
  </div>

  <!-- Таблица заказов -->
  <div class="card-panel white lighten-1 orders-container">
    <table class="striped highlight responsive-table" id="orders-table">
      <thead>
        <tr>
          <th class="sortable" data-sort="item_name">Название</th>
          <th class="sortable" data-sort="count">Кол-во</th>
          <th class="sortable" data-sort="price">Цена</th>
          <th class="sortable" data-sort="desired_date">Желаемая дата</th>
          <th class="sortable" data-sort="delivery_date">Предполагаемая</th>
          <th>Пользователь</th>
          <th class="sortable" data-sort="status">Статус</th>
          <th>Комментарий</th>
          <th></th>
        </tr>
      </thead>
      <tbody id="orders-body">
        {{#each requests}}
          {{#unless (or (isEqual this.status 4) (isEqual this.status 5))}}
            <tr>
              <form class="order-form" data-id="{{this.ID}}">
                <td><a href="{{this.link}}" target="_blank">{{this.item_name}}</a></td>
                <td data-field="count">{{this.count}}</td>
                <td data-field="price">{{this.price}}</td>
                <td data-field="desired_date">{{this.desired_date}}</td>
                <td class="hide" data-field="registration_date">{{this.registration_date}}</td>
                <td data-field="delivery_date">
                  <input type="date" name="delivery_date" value="{{this.delivery_date}}" min="{{todayDate}}" required>
                  <span class="formatted-date">
                    {{#if this.delivery_date}}{{this.delivery_date}}{{else}}—{{/if}}
                  </span>
                </td>
                <td data-field="user_fullname">{{this.user_fullname}}</td>
                <td data-field="status">
                  <select name="status" class="browser-default">
                    <option value="0" {{#if (isEqual this.status 0)}}selected{{/if}}>На рассмотрении</option>
                    <option value="1" {{#if (isEqual this.status 1)}}selected{{/if}}>Закупаем</option>
                    <option value="2" {{#if (isEqual this.status 2)}}selected{{/if}}>Ждём поставку</option>
                    <option value="3" {{#if (isEqual this.status 3)}}selected{{/if}}>Готово к получению</option>
                    <option value="4" {{#if (isEqual this.status 4)}}selected{{/if}}>Получен</option>
                    <option value="5" {{#if (isEqual this.status 5)}}selected{{/if}}>Отменено</option>
                  </select>
                </td>
                <td data-field="comment">
                  <input type="text" name="comment" maxlength="500" value="{{this.comment}}">
                </td>
                <td class="order-actions">
                  <button type="button" class="btn-flat tooltipped save-order-btn" data-tooltip="Сохранить изменения">
                    <i class="material-icons green-text">check</i>
                  </button>
                  <button type="button" class="btn-flat tooltipped edit-btn" data-tooltip="Редактировать" data-id="{{this.ID}}">
                    <i class="material-icons">edit</i>
                  </button>
                </td>
              </form>
            </tr>
          {{/unless}}
        {{/each}}
      </tbody>
    </table>
  </div>

  <!-- MODAL: изменение статуса -->
  <div id="status-modal" class="modal">
    <form method="POST" id="status-form">
      <div class="modal-content">
        <h5>Изменить статус заявки</h5>
        <div class="input-field">
          <select name="new_status" id="new-status-select" required>
            <option value="" disabled selected>Выберите статус</option>
            <option value="На рассмотрении">На рассмотрении</option>
            <option value="Закупаем">Закупаем</option>
            <option value="Ждём поставку">Ждём поставку</option>
            <option value="Готово к получению">Готово к получению</option>
            <option value="Получен">Получен</option>
          </select>
          <label for="new-status-select" class="active">Новый статус</label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="modal-close btn blue darken-4">Сохранить</button>
        <a class="modal-close btn-flat">Отмена</a>
      </div>
    </form>
  </div>

  <!-- MODAL: редактирование заявки -->
  <div id="edit-modal" class="modal">
    <form method="POST" id="edit-form">
      <div class="modal-content">
        <h5>Редактировать заявку</h5>
        <div class="input-field">
          <input id="edit-item-name" name="item_name" type="text" required>
          <label for="edit-item-name" class="active">Название</label>
        </div>
        <div class="input-field">
          <input id="edit-count" name="count" type="number" required>
          <label for="edit-count" class="active">Количество</label>
        </div>
        <div class="input-field">
          <input id="edit-link" name="link" type="text" required>
          <label for="edit-link" class="active">Ссылка в названии</label>
        </div>
        <div class="input-field">
          <input id="edit-expected-date" name="expected_date" type="date">
          <label for="edit-expected-date" class="active">Предполагаемая дата</label>
        </div>
        <div class="input-field">
          <select id="edit-status" name="status" required>
            <option value="На рассмотрении">На рассмотрении</option>
            <option value="Закупаем">Закупаем</option>
            <option value="Ждём поставку">Ждём поставку</option>
            <option value="Готово к получению">Готово к получению</option>
            <option value="Получен">Получен</option>
          </select>
          <label for="edit-status" class="active">Статус</label>
        </div>
        <div class="input-field">
          <input id="edit-comment" name="comment" type="text">
          <label for="edit-comment" class="active">Комментарий</label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="modal-close btn blue darken-4">Сохранить</button>
        <a class="modal-close btn-flat">Отмена</a>
      </div>
    </form>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // --- Инициализация Materialize ---
      const statusModal    = M.Modal.init(document.getElementById('status-modal'));
      const editModal      = M.Modal.init(document.getElementById('edit-modal'));
      M.FormSelect.init(document.querySelectorAll('select'));

      // --- Ограничение на минимальную дату для delivery_date ---
      document.querySelectorAll('[name="delivery_date"]').forEach(input => {
        const today = new Date().toISOString().slice(0, 10);
        input.setAttribute('min', today);
      });

      // --- Логика модалки изменения статуса ---
      const statusForm = document.getElementById('status-form');
      document.querySelectorAll('.change-status-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.dataset.id;
          const currentStatus = btn.dataset.status;
          statusForm.action = `/update-status/${id}`;
          const select = document.getElementById('new-status-select');
          [...select.options].forEach(opt => opt.selected = (opt.value === currentStatus));
          M.FormSelect.init(select);
          statusModal.open();
        });
      });

      // --- Фильтрация и сортировка ---
      const searchInput  = document.getElementById('search-input');
      const statusFilter = document.getElementById('status-filter');
      const dateFrom     = document.getElementById('date-from');
      const dateTo       = document.getElementById('date-to');
      let rows           = Array.from(document.querySelectorAll('#orders-body tr'));
      let sortField      = null;
      let sortAsc        = true;

      function applyFilters() {
        const term           = searchInput?.value.toLowerCase() || '';
        const selectedStatus = statusFilter?.value || '';
        const from           = dateFrom?.value;
        const to             = dateTo?.value;

        rows.forEach(row => {
          // Фильтр по диапазону дат (desired_date)
          const rowDate = row.querySelector('[data-field="desired_date"]').innerText.trim();
          if (from && rowDate < from) { row.style.display = 'none'; return; }
          if (to   && rowDate > to)   { row.style.display = 'none'; return; }

          // Поиск по тексту и статусу
          const text          = row.innerText.toLowerCase();
          const statusSelect  = row.querySelector('select[name="status"]');
          const matchesSearch = !term || text.includes(term);
          const matchesStatus= !selectedStatus || (statusSelect && statusSelect.value === selectedStatus);
          M.FormSelect.init(document.getElementById('edit-status'));
M.updateTextFields();

          row.style.display = (matchesSearch && matchesStatus) ? '' : 'none';
        });
      }

      if (searchInput)  searchInput.addEventListener('input', applyFilters);
      if (statusFilter) statusFilter.addEventListener('change', applyFilters);
      if (dateFrom)     dateFrom.addEventListener('change', applyFilters);
      if (dateTo)       dateTo.addEventListener('change', applyFilters);

      function sortTable(field) {
        const indexMap = {
          item_name:     0,
          count:         1,
          price:         2,
          desired_date:  3,
          delivery_date: 5,
          status:        6
        };
        const colIndex = indexMap[field];
        const sorted   = [...rows].sort((a, b) => {
          const aText = (a.cells[colIndex]?.innerText || '').trim();
          const bText = (b.cells[colIndex]?.innerText || '').trim();
          const aNum  = parseFloat(aText.replace(',', '.'));
          const bNum  = parseFloat(bText.replace(',', '.'));
          if (!isNaN(aNum) && !isNaN(bNum)) {
            return sortAsc ? aNum - bNum : bNum - aNum;
          }
          return sortAsc ? aText.localeCompare(bText) : bText.localeCompare(aText);
        });
        const tbody = document.getElementById('orders-body');
        tbody.innerHTML = '';
        sorted.forEach(r => tbody.appendChild(r));
      }

      document.querySelectorAll('.sortable').forEach(th => {
        th.addEventListener('click', () => {
          const field = th.getAttribute('data-sort');
          sortAsc = (sortField === field) ? !sortAsc : true;
          sortField = field;
          sortTable(field);
        });
      });

      // --- Сохранение через AJAX ---
      document.addEventListener('click', async e => {
        const btn = e.target.closest('.save-order-btn');
        if (!btn) return;

        const row              = btn.closest('tr');
        const form             = row.querySelector('form.order-form');
        const orderId          = form.dataset.id;
        const deliveryInput    = row.querySelector('[name="delivery_date"]');
        const statusSelect     = row.querySelector('[name="status"]');
        const commentInput     = row.querySelector('[name="comment"]');

        const data = {
          delivery_date: deliveryInput.value,
          status:        parseInt(statusSelect.value),
          comment:       commentInput.value
        };

        try {
          const res = await fetch(`/admin-update/${orderId}`, {
            method:  'POST',
            headers: {'Content-Type':'application/json'},
            body:    JSON.stringify(data)
          });
          const json = await res.json();
          if (json.success) {
            M.toast({ html:'Изменения успешно сохранены', classes:'green darken-1 rounded' });
            // Обновление отображения
            if (data.delivery_date) {
              row.querySelector('.formatted-date').textContent = data.delivery_date.split('-').reverse().join('.');
            }
            statusSelect.dispatchEvent(new Event('change'));
            rows = Array.from(document.querySelectorAll('#orders-body tr'));
            applyFilters();
          } else {
            M.toast({ html: json.message||'Ошибка при сохранении', classes:'red darken-1 rounded' });
          }
        } catch (err) {
          console.error(err);
          M.toast({ html:'Ошибка сети при сохранении', classes:'red darken-1 rounded' });
        }
      });

      // --- Логика модалки редактирования ---
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const id   = btn.dataset.id;
          const row  = btn.closest('tr');
          const a    = row.querySelector('a');
          const item = a.innerText.trim();
          const link = a.href;
          const cnt  = row.querySelector('[data-field="count"]').innerText.trim();
          const del  = row.querySelector('input[name="delivery_date"]').value;
          const stat = row.querySelector('select[name="status"]').value;
          const com  = row.querySelector('input[name="comment"]').value;

          document.getElementById('edit-item-name').value     = item;
          document.getElementById('edit-link').value          = link;
          document.getElementById('edit-count').value         = cnt;
          document.getElementById('edit-expected-date').value = del;
          document.getElementById('edit-status').value        = stat;
          document.getElementById('edit-comment').value       = com;
          document.getElementById('edit-form').action         = `/edit/${id}`;

          M.updateTextFields();
          M.FormSelect.init(document.getElementById('edit-status'));
          editModal.open();
        });
      });

    });
  </script>
</div>

<style>
  .modal {
    border-radius: 16px;
  }
  /* Блюр заднего фона при открытом модальном окне */
body:has(.modal.open)::before {
  content: '';
  position: fixed;
  inset: 0;
  z-index: 998;
  background: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(2px);
}

</style>