{{!-- views/user_applications.hbs --}}

<div class="orders-page-container">
  <div class="header-section">
    <h1 class="page-title">Мои заказы</h1>

    <div class="filter-search-wrapper">
      <div class="search-container input-field">
        <input id="search" type="text" placeholder="Поиск по заказам...">
      </div>

      <div class="input-field status-select-wrapper">
        <select id="status-filter">
          <option value="">Все статусы</option>
          <option value=0>На рассмотрении</option>
          <option value=1>Закупаем</option>
          <option value=2>Ждём поставку</option>
          <option value=3>Готово к получению</option>
          <option value=4>Получен</option>
          <option value=5>Отменено</option>
        </select>
        <label>Фильтр по статусу</label>
      </div>

      <a class="btn-floating btn-large waves-effect waves-light blue modal-trigger" href="#create-modal" title="Добавить">
        <i class="material-icons">add</i>
      </a>
    </div>
  </div>

  <div class="orders-container card-panel white lighten-1">
    <table class="highlight responsive-table">
      <thead>
        <tr>
          <th class="sortable" data-sort="item_name">Название</th>
          <th class="sortable" data-sort="count">Кол-во</th>
          <th class="sortable" data-sort="price">Цена</th>
          <th class="sortable" data-sort="desired_date">Желаемая дата</th>
          <th class="sortable" data-sort="estimated_delivery">Ожидаемая доставка</th>
          <th class="sortable" data-sort="status">Статус</th>
          <th>Комментарий</th>
          <th>Действия</th>
        </tr>
      </thead>
      <tbody>
        {{#each requests}}
          {{#if (isEqual this.status 4)}}
          {{else}}
            <tr data-request='{
              "ID": "{{this.ID}}",
              "item_name": "{{this.item_name}}",
              "count": "{{this.count}}",
              "price": "{{this.price}}",
              "desired_date": "{{this.desired_date}}",
              "comment": "{{this.comment}}",
              "status": "{{this.status}}"
            }'>
              <td><a href="{{this.link}}" target="_blank">{{this.item_name}}</a></td>
              <td>{{this.count}}</td>
              <td>{{this.price}}</td>
              <td>{{this.desired_date}}</td>
              <td>{{this.delivery_date}}</td>
              <td>
                <span value="{{this.status}}" class="status-badge">
                  {{#if (isEqual this.status 0)}} На рассмотрении {{/if}}
                  {{#if (isEqual this.status 1)}} Закупаем {{/if}}
                  {{#if (isEqual this.status 2)}} Ждём поставку {{/if}}
                  {{#if (isEqual this.status 3)}} Готово к получению {{/if}}
                  {{#if (isEqual this.status 4)}} Получен {{/if}}
                  {{#if (isEqual this.status 5)}} Отменено {{/if}}
                </span>
              </td>
              <td>{{this.comment}}</td>
              <td>
                {{#if (isEqual this.status 0)}}
                <a class="btn-flat edit-btn">
                  <i class="material-icons">edit</i>
                </a>
                {{/if}}
                <button class="btn-flat delete-btn" data-id="{{this.ID}}">
                  <i class="material-icons red-text">delete</i>
                </button>
              </td>
            </tr>
          {{/if}}
        {{/each}}
      </tbody>
    </table>
  </div>
</div>

<!-- Модальное окно создания/редактирования -->
<div id="create-modal" class="modal">
  <form id="order-form" method="POST">
    <div class="modal-content">
      <h5 id="modal-title">Новый заказ</h5>
      <div class="input-field">
        <input name="item_name" id="item_name" type="text" required>
        <label for="item_name">Название товара</label>
      </div>
      <div class="input-field">
        <input name="link" id="link" type="url">
        <label for="link">Ссылка на товар</label>
      </div>
      <div class="input-field">
        <input name="count" id="count" type="number" min="1" required>
        <label for="count">Количество</label>
      </div>
      <div class="input-field">
        <input name="price" id="price" type="number" step="0.01" required>
        <label for="price">Цена</label>
      </div>
      <div class="input-field">
        <input name="desired_date"  id ="desired_date" type="date" min="{{todayDate}}" required>
        <label for="desired_date">Желаемая дата</label>
      </div>
      <div class="input-field">
        <textarea name="comment" id="comment" class="materialize-textarea"></textarea>
        <label for="comment">Комментарий</label>
      </div>
    </div>
    <div class="modal-footer">
      <button type="submit" class="btn green">Сохранить</button>
      <a href="#!" class="modal-close btn-flat">Отмена</a>
    </div>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    M.AutoInit();
  // Ограничение на дату из прошлого
    const deliveryDateInput = document.getElementById('desired_date');
    if (deliveryDateInput) {
      const today = new Date();
      const todayDate = today.toISOString().slice(0, 10);
      deliveryDateInput.setAttribute('min', todayDate); 
    }
  
    const modalInstance = M.Modal.getInstance(document.getElementById('create-modal'));
    const form = document.getElementById('order-form');

    // Открытие модального окна для создания
    document.querySelector('a.modal-trigger').addEventListener('click', () => {
      document.getElementById('modal-title').textContent = 'Новый заказ';
      form.action = '/create';
      clearForm();
      modalInstance.open();
    });

    // Редактирование
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', function () {
        const row = this.closest('tr');
        const data = JSON.parse(row.dataset.request);
        document.getElementById('modal-title').textContent = 'Редактировать заказ';
        form.action = `/edit/${data.ID}`;
        fillForm(data);
        modalInstance.open();
                
      });
    });

    // Функция заполнения формы
    function fillForm(data) {
      document.getElementById('item_name').value = data.item_name || '';
      document.getElementById('count').value = data.count || '';
      document.getElementById('price').value = data.price || '';
      document.getElementById('comment').value = data.comment || '';
      document.getElementById('link').value = data.link || '';
      // Переводим дату из формата 'дд.мм.гггг' в 'YYYY-MM-DD'
      if (data.desired_date && data.desired_date.includes('.')) {
        const [day, month, year] = data.desired_date.split('.');
        document.getElementById('desired_date').value = `${year}-${month}-${day}`;
      } else {
        document.getElementById('desired_date').value = data.desired_date || '';
      }

      M.updateTextFields(); // обновляем стили Materialize
    }

    function clearForm() {
      ['item_name', 'count', 'price', 'desired_date', 'comment', 'link'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.value = '';
      });
      M.updateTextFields();
    }

    // Удаление
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        const requestId = this.dataset.id;
        if (confirm('Вы уверены, что хотите удалить эту заявку?')) {
          fetch('/delete', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ID: requestId })
          }).then(response => {
            if (response.ok) window.location.href = '/applications';
            else alert('Ошибка при удалении заявки.');
          }).catch(error => {
            console.error('Ошибка:', error);
            alert('Произошла ошибка при удалении.');
          });
        }
      });
    });

    // Фильтрация
    const searchInput = document.getElementById('search');
    const statusFilter = document.getElementById('status-filter');
    const rows = Array.from(document.querySelectorAll('tbody tr'));

    function applyFilters() {
      const search = searchInput.value.toLowerCase();
      const selectedStatus = statusFilter.value;

      rows.forEach(row => {
        const text = row.innerText.toLowerCase();
        const status = row.querySelector('.status-badge')?.getAttribute('value') || '';
        const matchesSearch = !search || text.includes(search);
        const matchesStatus = !selectedStatus || status === selectedStatus;
        row.style.display = (matchesSearch && matchesStatus) ? '' : 'none';
      });
    }

    searchInput.addEventListener('input', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
    
  });
</script>

<style>
  .orders-page-container {
    padding: 24px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-title {
    font-size: 28px;
    font-weight: 600;
    margin-bottom: 16px;
    color: #2c3e50;
  }

  .filter-search-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    flex-wrap: wrap;
    gap: 16px;
    margin-bottom: 24px;
  }

  .search-container {
    flex-grow: 1;
    max-width: 300px;
    position: relative;
  }

  .search-container input {
    padding-left: 36px;
    height: 40px;
    font-size: 16px;
  }

  .search-container .material-icons.prefix {
    position: absolute;
    top: 8px;
    left: 8px;
    color: #888;
  }

  .status-select-wrapper {
    min-width: 200px;
  }

  .orders-container {
    margin-top: 24px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .orders-container table {
    margin: 0;
  }

  .status-badge {
    display: inline-block;
    padding: 4px 10px;
    border-radius: 16px;
    font-size: 13px;
    background-color: #1976d2;
    color: white;
    font-weight: 500;
  }

  @media screen and (max-width: 768px) {
    .filter-search-wrapper {
      flex-direction: column;
      align-items: stretch;
    }

    .page-title {
      font-size: 22px;
      text-align: center;
    }
  }
</style>